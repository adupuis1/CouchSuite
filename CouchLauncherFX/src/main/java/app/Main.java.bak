package app;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextField;
import javafx.scene.control.ToolBar;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Region;
import javafx.scene.layout.TilePane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main extends Application {

    private TextField hostField;
    private VBox root;
    private TilePane tilePane;

    private enum Theme {
        COSMIC_BLUE("Cosmic Blue", "theme-cosmic-blue"),
        LIGHT_GLAZE("Light Glaze", "theme-light-glaze"),
        NOIR_CONTRAST("Noir Contrast", "theme-noir-contrast");

        private final String displayName;
        private final String styleClass;

        Theme(String displayName, String styleClass) {
            this.displayName = displayName;
            this.styleClass = styleClass;
        }

        @Override
        public String toString() {
            return displayName;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        stage.setTitle("Couch Launcher");

        root = new VBox();
        root.setSpacing(24);
        root.setPadding(new Insets(24));
        root.getStyleClass().add("app-root");

        Scene scene = new Scene(root, 1280, 800);
        scene.getStylesheets().add(getClass().getResource("/application.css").toExternalForm());

        ToolBar toolBar = buildToolbar(stage);

        Label title = new Label("Select an experience");
        title.getStyleClass().add("launcher-title");

        tilePane = buildTilePane();

        root.getChildren().addAll(toolBar, title, tilePane);

        scene.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ESCAPE) {
                stage.close();
            }
        });

        stage.setScene(scene);
        stage.setFullScreenExitHint("Press ESC to exit");
        stage.setFullScreen(true);
        stage.show();

        applyTheme(Theme.COSMIC_BLUE);
    }

    private ToolBar buildToolbar(Stage stage) {
        ToolBar toolBar = new ToolBar();
        toolBar.getStyleClass().add("top-bar");

        Label hostLabel = new Label("Host:");
        hostLabel.getStyleClass().add("host-label");

        hostField = new TextField();
        hostField.setPromptText("GPU Host (e.g., 192.168.1.50)");
        hostField.setPrefWidth(280);

        ComboBox<Theme> themeSelector = new ComboBox<>(FXCollections.observableArrayList(Theme.values()));
        themeSelector.setPrefWidth(180);
        themeSelector.getSelectionModel().select(Theme.COSMIC_BLUE);
        themeSelector.valueProperty().addListener((observable, oldValue, newValue) -> applyTheme(newValue));

        Region spacer = new Region();
        spacer.setMinWidth(24);
        spacer.setPrefWidth(Double.MAX_VALUE);

        Button exitButton = new Button("Exit");
        exitButton.setOnAction(event -> stage.close());
        exitButton.getStyleClass().add("exit-button");

        toolBar.getItems().addAll(hostLabel, hostField, new Separator(), themeSelector, spacer, exitButton);
        return toolBar;
    }

    private TilePane buildTilePane() {
        TilePane tiles = new TilePane();
        tiles.setHgap(32);
        tiles.setVgap(32);
        tiles.setPrefColumns(3);
        tiles.setPrefTileWidth(320);
        tiles.setPrefTileHeight(180);
        tiles.setAlignment(Pos.TOP_CENTER);
        tiles.setTileAlignment(Pos.CENTER);
        tiles.setPadding(new Insets(8, 0, 8, 0));
        tiles.getStyleClass().add("tile-grid");

        tiles.getChildren().addAll(
                makeTile("Steam Big Picture", "steam_big_picture"),
                makeTile("Switch Emulator", "switch_emulator"),
                makeTile("Settings", "settings")
        );

        return tiles;
    }

    private Button makeTile(String label, String id) {
        Button button = new Button(label);
        button.setPrefSize(320, 180);
        button.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        button.setWrapText(true);
        button.getStyleClass().add("launcher-tile");
        button.setOnAction(event -> launch(id));
        return button;
    }

    private void applyTheme(Theme theme) {
        if (theme == null) {
            return;
        }
        root.getStyleClass().removeIf(style -> style.startsWith("theme-"));
        root.getStyleClass().add(theme.styleClass);
    }

    private void launch(String appId) {
        String host = hostField.getText().trim();
        if (host.isEmpty()) {
            host = "<unset>";
        }

        if ("settings".equals(appId)) {
            Alert settingsAlert = new Alert(
                    Alert.AlertType.INFORMATION,
                    "Settings placeholder.\nHost: " + host,
                    ButtonType.OK
            );
            settingsAlert.setHeaderText("Settings");
            settingsAlert.showAndWait();
            return;
        }

        Alert launchAlert = new Alert(
                Alert.AlertType.INFORMATION,
                "Would launch '" + appId + "' against host: " + host + "\n" +
                        "(On Linux, we'll run: moonlight stream " + host + " --app ...)",
                ButtonType.OK
        );
        launchAlert.setHeaderText("Launch (stub)");
        launchAlert.showAndWait();

        // Example Linux call (uncomment when inside Linux VM with moonlight installed):
        // try {
        //     String appName = "steam_big_picture".equals(appId) ? "Steam Big Picture" : "Switch Emulator";
        //     new ProcessBuilder("moonlight", "stream", host, "--app", appName).start();
        // } catch (Exception ex) {
        //     new Alert(Alert.AlertType.ERROR, "Failed to start Moonlight: " + ex.getMessage(), ButtonType.OK).showAndWait();
        // }
    }
}
